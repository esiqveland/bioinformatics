package main

import (
	"sort"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMotifEnumeration(t *testing.T) {
	dna := NormalizeListDNA([]string{"ATTTGGC", "TGCCTTA", "CGGTATC", "GAAAATT"})

	res := MotifEnumeration(dna, 3, 1)
	results := res.DeNormalize()
	sort.Strings(results)

	assert.Equal(t, []string{"ATA", "ATT", "GTT", "TTT"}, results)
}

func TestMotifEnumeration_debug1(t *testing.T) {
	dna := NormalizeListDNA([]string{"ACGT", "ACGT", "ACGT"})

	res := MotifEnumeration(dna, 3, 0)
	results := res.DeNormalize()
	sort.Strings(results)

	assert.Equal(t, []string{"ACG", "CGT"}, results)
}

func TestMotifEnumeration_debug2(t *testing.T) {
	dna := NormalizeListDNA([]string{"AAAAA", "AAAAA", "AAAAA"})

	res := MotifEnumeration(dna, 3, 1)
	results := res.DeNormalize()
	sort.Strings(results)

	assert.Equal(t, []string{"AAA", "AAC", "AAG", "AAT", "ACA", "AGA", "ATA", "CAA", "GAA", "TAA"}, results)
}

func TestDistanceBetweenPatternAndStrings(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"TTACCTTAAC",
		"GATATCTGTC",
		"ACGGCGTTCG",
		"CCCTAAAGAG",
		"CGTCAGAGGT",
	})

	assert.Equal(t, 5, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("AAA")))
}

func TestDistanceBetweenPatternAndStrings_debug1(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"TTTATTT",
		"CCTACAC",
		"GGTAGAG",
	})

	assert.Equal(t, 3, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("TAA")))
}

func TestDistanceBetweenPatternAndStrings_debug2(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"AAACT",
		"AAAC",
		"AAAG",
	})

	assert.Equal(t, 0, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("AAA")))
}

func TestDistanceBetweenPatternAndStrings_debug3(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"TTTTAAA",
		"CCCCAAA",
		"GGGGAAA",
	})

	assert.Equal(t, 0, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("AAA")))
}

func TestDistanceBetweenPatternAndStrings_debug4(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"AAATTTT",
		"AAACCCC",
		"AAAGGGG",
	})

	assert.Equal(t, 0, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("AAA")))
}

func TestDistanceBetweenPatternAndStringsLong(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"ACGCGAAGTGATGTGGAAGGCCCGCAATCCTTAAGTCCCACTAGAAGAACGAACTCCGTAGGATTAGTGACGGCGTCCAAGTTATCAACAGCTAGC",
		"CAATGCATCTGGAGGTACGTGAACTTAAAGTGATCGGGGATTACCCCGCTGTTTTATTTGATTGGACATAGACGGAGGTGGGTCGTAAGATAATAC",
		"ACCGAAGTGAAACACGGGCTTAAAACCAGGTGACAACATCTGAAGCACCTAGTGGTTCAAGTTGGCAGCATTTTCGTCGGTACAGAGGAATCGCGT",
		"GGACAGCAAGTCGTGTAAAGCTTGTGAAGAGCCGAACCTAGTTTTACAATGTAAGATACAGACAATATACGGTCTCTTGTACAGGCCACAGGGCGC",
		"GCCTCGGACTCATACGGGCACCTATGAAGTTAGAGAGCATCCCCCATAGGAAGTAGAGTCTATTGGCGAGGCCCAAGGACCGAGCCAGAAATTGTT",
		"CCTTCGAAGGAGCAGGGGGATCAGTGTTATTAGATCGGGCTCGGAGCCCTCTATCTGGCTTGCGAGCGCATATGTTACAACTCGCCTGTCTTATCT",
		"CGTTGGGGAGTGCATTCATACGGTAGTCATAAGTAGAGGTCCATCAGAGGTCTTGGTCAGCCGACGCCATGCTGGTGTTTAGAGGTTTCGAAGGTC",
		"GGCTCACACTTTCGAAAGCGACCTTTACTGTGACGTGCGTGGCCTAACCCGATCTTTAGGTAAATATGGGTTTTATGTTAGCATAGGCCGCCCCAC",
		"CCTTGCGGGCCCACGCCCTCCAGGGAGTGTCTACCTCTATCCCGTTACAGCGATTGGATAATTGTCAACTCAACAAACGGGCAATGGGTGCTTCAA",
		"CTCTTTCGTTAAGGGACGTAATTGCGGTCCACCCAAGACACCTACCTGTGAGTATACAATATGCTCGTAATATCACAGGAGCAGGCAGCGAAATCT",
		"GATCAGCTGCTCGTTGACGTCCTTACTACCGGACTCTACGCGACTGGCAGTCTATTCACTAAGCATTGCTAGGTAATCGGGGACATCTGGTTTAAG",
		"TGAGTGCCCGGTGCCAAATGCCGAATTTAGCTGGGCACCTCATATGAAGATAATCTCTTGGTATCGGGTCCCTAATCAAAAACACGTTCAATGATC",
		"GGCCAAGGATTCACACTAAGTCTGCAGGGGTCCTTTATCTCTTTGTGCAGCACGCGTTTTCGTCACTCCCTATAATCTTTTCGGTTAGCCGCCGGG",
		"CTGCCTAAGACTTGGTTTGCAATGGCCATTCTCCGGTTTGGGCCGCGTGACGCGGTGACCCATCAGCCGGACATGAGAGCTAGCTGGACAGGGTAG",
		"ACGATTGTTTACGCGAGTCTGGAGAGGTCTGGAGATTGGTGCTATAATACAGGAAGGATGCGTGGGCTTACACGGTCCACACTTTATTCGATCGAG",
		"TGAACCTGCCATGGCTCTTGGATCCAACTGCAACGGTTTCTACACGCCACCACACCCCTTCCCTAAATCGGTGCGTGAAGAATACGCTGCAACCGT",
		"ATGTTATTATATCCCAGAGATTCAAACTATTAATCATGCCAAAAACGTTTCCTGGAACTGCTTCGCTGGCTCCACACGTTTGCTGACGACTTTTGA",
		"AACGTTTCCAACTAGACTCCCTCCACTACTAGCTACAAAGACTCTGGTTTCTGCCAAGCGGGTCCTTGAACGACTCTCTGACATCAACCTCGTTGG",
		"TGCTTGGGTGGACACGGACCGTATAAACGCGGTTCGGGTACAATATGACTCCGTAGCCCCAATGAGACGAAACACCAAACATGGGTCCACTTCCTC",
		"CGAGTAACGTCTACCTCAGTGGGTTAGCACGATCATCCGATATGACCGGTCCTTATGTCCGTGGGTAACACACGGAGAAGGTTTTGACAATTGTCC",
		"AATCATACGCCCAGAATAATAGACCATGCTGGGTCACGACCGTTGCCGAGATCGATCATAACAGGCGACCCATCCAACCAGTTCTCATCCACACAT",
		"GTACTTCAAGGCAGGGTGATCTCGAAGAACAAGTGGGCGGCGTTTAGCGGCGCAGGGCTCCTTACTGGTACGCCTCTATAGTTAGCGCAATCGCAG",
		"CAGAGCTCGTACTAGTGTGGCCAATGACGCCTCTTCGAGCACTTCACATTTCAACTTCATCCATGCCGGTCTTACTCGGAAGTCCCCTATGTATCG",
		"GACAGGCACTATTCACCACGTGATTGTTGGGGTCCCGCCTTCAGTGTAAGGGTAAGAGCCCCGCGATTCATGAAAATGTCCCTTTGACCGCAAAGC",
		"GAGTCAGAACAATCAATCTAAGCGGTATAACTCAGGCCGCCCATCTCTTTTGGACTCTGTAAATCAGCGCCTGATCTGGTTAGCGCTACGGAAAAA",
		"AGTCGCGCCGCTAATGACCACGAGCGCTCATTCCACCTTGGTTCGAACTACTGGGCCCGTATATAATAGTGACGCTTCTAGCCCATTCCAGATGTC",
		"CATTTTCTCAGGGGCATAGTATGCCTGACTGAGAATCATATACGAAGCGCGCGTCCGGTTGCTTTGGGGTTAAGTACATAGTGAAGATGCGCCCTC",
		"CGTAACCCTACTTGCACTTTATGAGGAATAGTATAACATAGCGAGCCTCGCACGACGCTTAAGCCACAGTAAGTCCAAAAATGAGTGGAAATCACC",
		"TTGAACCCTCATCCCTGATCCGTACCCAAGTCGTGACACATTTTGGCCCCAGGAAATCGTCTTATATGTCTCGTCAGAATCCGGCGTCGGCTACTG",
		"AGAAGGCTGCATAATTCCCGTTGGAAAAAGTCGGCTTCCGTAGGAACTGGCAGTAAGGGGCTGTGTAAAAAAGTCCATAGTGTGCGCCCGCCCTGA",
		"GGCGCCACCTAAGCACAGGTAGGGGGCATAACACCAAGGGCACGTGGCTGAGTAAGTCACTAAACCAGATTCTTTGACTGATTCTAGATATGTTCA",
		"TTCCACTCAAAATTGTACCTCTATCCACGGTTTGGAACGCGTGACGGACATCATCTGCGTACGTGCTCCGTATGTGGCCCCCGGGCTCGCACACCA",
		"GATCACGACCATGATGTACCCAACAGTCCGGGGTCGTCAGTAACCGAGGAACCGGTTGCCCAATACTCGACGTGGGTAGACTTACTCGCCTTTCTG",
		"CCGAGGCAGGGCCCCCGATTGCAGCTTTGGGGTCCCTGACTATGCGCTAGCCGCTAGCCTCATCACTCCGCTGGCAGCCCCTAGGGTACGGCGTAA",
	})

	assert.Equal(t, 77, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("GATGCGA")))
}

func TestMedianString(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"AAATTGACGCAT",
		"GACGACCACGTT",
		"CGTCAGCGCCTG",
		"GCTGAGCACCGG",
		"AGTTCGGGACAG",
	})

	pats := MedianString(dna, 3).DeNormalize()
	sort.Strings(pats)

	assert.Equal(t, []string{"GAC"}, pats)

}

func TestDistanceBetweenPatternAndStrings2(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"ACGT",
		"ACGT",
		"ACGT",
	})

	assert.Equal(t, 0, DistanceBetweenPatternAndStrings(dna, NormalizeDNA("ACG")))

}

func TestMedianString_debug1(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"ACGT",
		"ACGT",
		"ACGT",
	})

	pats := MedianString(dna, 3).DeNormalize()
	sort.Strings(pats)

	assert.Equal(t, []string{"ACG"}, pats)

}

func TestMostProbableKmer(t *testing.T) {
	pMat := ProfileMatrix{
		data: [][]float64{
			{0.2, 0.2, 0.3, 0.2, 0.3}, // A
			{0.4, 0.3, 0.1, 0.5, 0.1}, // C
			{0.3, 0.3, 0.5, 0.2, 0.4}, // G
			{0.1, 0.2, 0.1, 0.1, 0.2}, // T
		},
	}

	kmer := MostProbableKmer(NormalizeDNA("ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT"), 5, pMat)

	assert.Equal(t, "CCGAG", DeNormalizeDNA(kmer))

}

const dataset_159_3 = "CTTGTAGGTCGAGACTCCTTGGCATGCCACAAAACATGATATTTGCATCGGCCGTGTCATCCATCTGCTTTGACAGCAGCCCGTTCTTGCACATCCAACGAACGAAGAATCCCCAACCGGGTTTGCGTACTTCCGCAACATTCGTAGCCACATCCTATGTCAGTTCGCGTAGTCCGCCGCAAGGTCCGCGAGTAAGTGTCTGGTAGCCTACGACTCAAACAACACGGTGCTATTCTCCATGTCGGTCTGAGAATAGTACACTCCACAGCGTCCAATTGACAAGTCCGATCGAAATGGACCTGAGTATGGTTTATAATCGTCCAGGTGGCATCCAACTAAAGGCCAAAGATGTCGTCTTGTATGATGGCTCCCTTCTCTGTTGATTCTAGCGCGCTTGTCAATATGTACGTCATGCAAAGTGAATAAATGGCACATCGGCCGGAATTCGCATATGTGCAGTCGCTGTCAAGGCAATCCCCTACTGGGGTACGTGCGGTTCGTGTGGGAAAATGTGTCACGAACAAAGAATTTCAGTACATAGCTTTACCGTATTTCCATCGCATCAACCATTATGTCTTGCGTAGAAATTTTCAAGGTCCACTACGGGATTTTAGTTTCTAGAATCGTTAGCTCGAGACCAATCAAGTTGAAAAGAGTAACCCATTCGTTTCCGGGCCATATCGGGAGCACTACATAGTGGGCTTAGTAGGAGACCTTGGGGCTAGGACCAACTTCCGCTCGCCTGTGTAATCCCGCTACGACCCGTGGTTAGGAGGGGATTCCGTTACGATGACATCTTATAGGAGCCATTGAATGCAGCATACCCTGCTAACTTAGGCTCAAATACCGATTCCCAATGTATGGGCTCCCCGAAGTCAGTCGCAGGGTCTTTGCTCCATAGTTGTAGTCACGTTCTAACTGGTGCGGATGATAACACACAGCATACTTGATTCTTCGATAGTTTGCAGCTTAGCGATAGATCACTGCCAACCTATACATC"

func TestMostProbableKmer_dataset_159_3(t *testing.T) {
	pMat := ProfileMatrix{
		data: [][]float64{
			{0.227, 0.273, 0.242, 0.136, 0.182, 0.288, 0.197, 0.258, 0.167, 0.318, 0.182, 0.273, 0.152, 0.318, 0.212},
			{0.136, 0.303, 0.273, 0.273, 0.227, 0.273, 0.212, 0.318, 0.303, 0.273, 0.333, 0.303, 0.288, 0.303, 0.227},
			{0.318, 0.273, 0.227, 0.273, 0.258, 0.212, 0.273, 0.197, 0.333, 0.227, 0.258, 0.197, 0.242, 0.182, 0.212},
			{0.318, 0.152, 0.258, 0.318, 0.333, 0.227, 0.318, 0.227, 0.197, 0.182, 0.227, 0.227, 0.318, 0.197, 0.348},
		},
	}
	kmer := MostProbableKmer(NormalizeDNA(dataset_159_3), 15, pMat)

	assert.Equal(t, "TGATTCTAGCGCGCT", DeNormalizeDNA(kmer))

}

func TestMedianString_dataset_158_9(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"AGCAGGGGTAGATACCGACGTTACGCCTTGTCGTAGTTGACA",
		"AGGTTAGCATCATCTATAATAGTCATGAGGTAATTCTGGTAG",
		"TAAAGGTACGAGATAGGCGAGGTCTCGTAGACGACCCATCGG",
		"GTCGCTCTAAGAACTAAGTGCCAGGAGACGTCGTAGTGGGCC",
		"GCAGCTGTTTCTCTTAGGAAGTTTTGTGTGTGGTAGTTTCCC",
		"TGTGGCAATCTTGACAGGTCGTAGTTGTGACTCCTGGTATCT",
		"ACTAGTCTGCGCTTCCTTTCGTAGAGCGGGTATACCCTTCAA",
		"TGTGGCCAAACGCCTGTTCTAATATCGTAGCGATCTCCTGTC",
		"GTAGTGCCGCCCTATTGGTCGTAGTTCAAAAGTGCACCCGTC",
		"AAACCGAGCCGATTCACCAGGGTGGCCCTACTAGGTTAGTAG",
	})

	pats := MedianString(dna, 6).DeNormalize()
	sort.Strings(pats)

	assert.Equal(t, []string{"ACG"}, pats)

}

func TestMedianString_dataset_158_9_(t *testing.T) {
	dna := NormalizeListDNA([]string{
		"CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC",
		"GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC",
		"GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG",
	})

	pats := MedianString(dna, 7).DeNormalize()
	sort.Strings(pats)

	assert.Equal(t, []string{"ACG"}, pats)

}

//func TestSubtleMotifDataset(t *testing.T) {
//	data, err := ioutil.ReadFile("subtle_motif.txt")
//	assert.NoError(t, err)
//
//	text := string(data)
//
//}

var dataset_motif_8 = []string{
	"TCTGAGCTTGCGTTATTTTTAGACC",
	"GTTTGACGGGAACCCGACGCCTATA",
	"TTTTAGATTTCCTCAGTCCACTATA",
	"CTTACAATTTCGTTATTTATCTAAT",
	"CAGTAGGAATAGCCACTTTGTTGTA",
	"AAATCCATTAAGGAAAGACGACCGT",
}

var dataset_motif_8_expected = []string{
	"AAACT",
	"AAATC",
	"AACAC",
	"AACAT",
	"AACCT",
	"AACTA",
	"AACTC",
	"AACTG",
	"AACTT",
	"AAGAA",
	"AAGCT",
	"AAGGT",
	"AAGTC",
	"AATAC",
	"AATAT",
	"AATCC",
	"AATCT",
	"AATGC",
	"AATTC",
	"AATTG",
	"ACAAC",
	"ACACA",
	"ACACC",
	"ACACG",
	"ACACT",
	"ACAGA",
	"ACAGC",
	"ACATC",
	"ACATG",
	"ACCAT",
	"ACCCT",
	"ACCGT",
	"ACCTA",
	"ACCTC",
	"ACCTG",
	"ACCTT",
	"ACGAC",
	"ACGAG",
	"ACGAT",
	"ACGCT",
	"ACGGT",
	"ACGTC",
	"ACGTT",
	"ACTAA",
	"ACTAG",
	"ACTAT",
	"ACTCA",
	"ACTCC",
	"ACTCG",
	"ACTCT",
	"ACTGA",
	"ACTGC",
	"ACTGT",
	"ACTTA",
	"ACTTC",
	"ACTTT",
	"AGAAA",
	"AGAAC",
	"AGAAG",
	"AGAAT",
	"AGACA",
	"AGACT",
	"AGATA",
	"AGATC",
	"AGCAT",
	"AGCCA",
	"AGCGT",
	"AGCTA",
	"AGCTC",
	"AGCTG",
	"AGCTT",
	"AGGAT",
	"AGGTA",
	"AGGTC",
	"AGTAA",
	"AGTAC",
	"AGTAT",
	"AGTCC",
	"AGTCG",
	"AGTCT",
	"AGTGA",
	"AGTTG",
	"ATAAA",
	"ATAAC",
	"ATACA",
	"ATACC",
	"ATAGA",
	"ATATA",
	"ATATC",
	"ATATG",
	"ATATT",
	"ATCAG",
	"ATCCC",
	"ATCCG",
	"ATCCT",
	"ATCGA",
	"ATCGC",
	"ATCTA",
	"ATCTC",
	"ATCTG",
	"ATGAC",
	"ATGAT",
	"ATGCA",
	"ATGCC",
	"ATGGA",
	"ATGGC",
	"ATGTA",
	"ATGTC",
	"ATTAA",
	"ATTAC",
	"ATTAG",
	"ATTAT",
	"ATTCA",
	"ATTCC",
	"ATTCG",
	"ATTGA",
	"ATTGC",
	"ATTGG",
	"ATTGT",
	"ATTTA",
	"ATTTC",
	"ATTTG",
	"ATTTT",
	"CAAAG",
	"CAACC",
	"CAACT",
	"CAAGA",
	"CAAGC",
	"CAATA",
	"CAATT",
	"CACAC",
	"CACAG",
	"CACCT",
	"CACGT",
	"CACTA",
	"CACTT",
	"CAGAA",
	"CAGAC",
	"CAGAT",
	"CAGGT",
	"CAGTA",
	"CAGTC",
	"CATAA",
	"CATAC",
	"CATAG",
	"CATAT",
	"CATCC",
	"CATCT",
	"CATGA",
	"CATGT",
	"CATTA",
	"CATTG",
	"CATTT",
	"CCAAG",
	"CCATA",
	"CCATG",
	"CCATT",
	"CCCGT",
	"CCCTA",
	"CCCTT",
	"CCGAA",
	"CCGAC",
	"CCGAT",
	"CCGCT",
	"CCGGT",
	"CCGTA",
	"CCGTC",
	"CCGTG",
	"CCGTT",
	"CCTAC",
	"CCTAT",
	"CCTCA",
	"CCTCC",
	"CCTTA",
	"CCTTC",
	"CCTTG",
	"CCTTT",
	"CGAAA",
	"CGAAG",
	"CGACA",
	"CGACT",
	"CGAGT",
	"CGATA",
	"CGATG",
	"CGATT",
	"CGCAA",
	"CGCAT",
	"CGCCA",
	"CGCGA",
	"CGCTA",
	"CGCTC",
	"CGCTT",
	"CGGAC",
	"CGGAT",
	"CGGCA",
	"CGGTA",
	"CGGTC",
	"CGGTT",
	"CGTAA",
	"CGTAC",
	"CGTCA",
	"CGTCG",
	"CGTCT",
	"CGTTA",
	"CGTTT",
	"CTAAC",
	"CTAAG",
	"CTAAT",
	"CTACA",
	"CTACC",
	"CTACG",
	"CTACT",
	"CTAGA",
	"CTAGC",
	"CTAGG",
	"CTAGT",
	"CTATA",
	"CTATC",
	"CTATG",
	"CTATT",
	"CTCAT",
	"CTCCG",
	"CTCGT",
	"CTCTA",
	"CTCTT",
	"CTGAA",
	"CTGAG",
	"CTGCA",
	"CTGCC",
	"CTGTA",
	"CTGTT",
	"CTTAA",
	"CTTAC",
	"CTTAG",
	"CTTAT",
	"CTTCA",
	"CTTGA",
	"CTTTA",
	"CTTTC",
	"CTTTG",
	"CTTTT",
	"GAAAT",
	"GAACA",
	"GAACT",
	"GAAGT",
	"GAATG",
	"GAATT",
	"GACAC",
	"GACAT",
	"GACCA",
	"GACCT",
	"GACGT",
	"GACTT",
	"GAGAA",
	"GAGAT",
	"GAGCT",
	"GATAA",
	"GATAC",
	"GATAG",
	"GATAT",
	"GATCA",
	"GATCC",
	"GATCG",
	"GATCT",
	"GATGT",
	"GATTA",
	"GATTC",
	"GATTG",
	"GATTT",
	"GCAAT",
	"GCACT",
	"GCATC",
	"GCATT",
	"GCCAT",
	"GCCGT",
	"GCCTA",
	"GCCTT",
	"GCGAT",
	"GCGGT",
	"GCGTC",
	"GCGTT",
	"GCTAA",
	"GCTAC",
	"GCTAG",
	"GCTAT",
	"GCTGA",
	"GCTGT",
	"GCTTA",
	"GCTTT",
	"GGAAT",
	"GGACA",
	"GGATA",
	"GGATC",
	"GGATT",
	"GGCTA",
	"GGGAT",
	"GGTAC",
	"GGTAG",
	"GGTAT",
	"GGTCA",
	"GGTCG",
	"GGTTA",
	"GTAAA",
	"GTAAG",
	"GTACA",
	"GTACC",
	"GTACG",
	"GTAGA",
	"GTATA",
	"GTATC",
	"GTATG",
	"GTATT",
	"GTCAA",
	"GTCAG",
	"GTCCG",
	"GTCCT",
	"GTCGA",
	"GTCGC",
	"GTCGT",
	"GTCTA",
	"GTCTG",
	"GTGAA",
	"GTGAG",
	"GTGCA",
	"GTGCG",
	"GTTAA",
	"GTTAC",
	"GTTAG",
	"GTTAT",
	"GTTCA",
	"GTTCC",
	"GTTCG",
	"GTTGA",
	"GTTTA",
	"TAAAC",
	"TAAAG",
	"TAACA",
	"TAACC",
	"TAACT",
	"TAAGA",
	"TAAGC",
	"TAATA",
	"TAATC",
	"TACAC",
	"TACAG",
	"TACCC",
	"TACCG",
	"TACCT",
	"TACGA",
	"TACGC",
	"TACGT",
	"TACTA",
	"TACTC",
	"TACTG",
	"TAGAA",
	"TAGAC",
	"TAGAG",
	"TAGAT",
	"TAGCC",
	"TAGCG",
	"TAGGA",
	"TAGTC",
	"TATAA",
	"TATAC",
	"TATAT",
	"TATCA",
	"TATCC",
	"TATCG",
	"TATGA",
	"TATGC",
	"TATGG",
	"TATGT",
	"TATTA",
	"TATTG",
	"TCAAC",
	"TCAAT",
	"TCACC",
	"TCACG",
	"TCACT",
	"TCAGA",
	"TCATA",
	"TCATG",
	"TCCAA",
	"TCCAC",
	"TCCAG",
	"TCCAT",
	"TCCCA",
	"TCCCT",
	"TCCGA",
	"TCCGC",
	"TCCGT",
	"TCCTA",
	"TCCTG",
	"TCCTT",
	"TCGAA",
	"TCGAC",
	"TCGAT",
	"TCGCC",
	"TCGCT",
	"TCGGA",
	"TCGGC",
	"TCGGG",
	"TCGGT",
	"TCGTC",
	"TCTAC",
	"TCTAG",
	"TCTAT",
	"TCTCC",
	"TCTCT",
	"TCTGG",
	"TCTGT",
	"TCTTA",
	"TCTTT",
	"TGAAA",
	"TGAAC",
	"TGAAT",
	"TGACA",
	"TGACC",
	"TGACT",
	"TGAGA",
	"TGAGC",
	"TGAGT",
	"TGATA",
	"TGATC",
	"TGATG",
	"TGATT",
	"TGCAA",
	"TGCAC",
	"TGCAG",
	"TGCAT",
	"TGCCA",
	"TGCCG",
	"TGCCT",
	"TGCGA",
	"TGCGT",
	"TGCTT",
	"TGGAA",
	"TGGAT",
	"TGGTA",
	"TGTAA",
	"TGTAG",
	"TGTAT",
	"TGTCC",
	"TGTCG",
	"TGTGG",
	"TGTTA",
	"TTAAA",
	"TTAAC",
	"TTAAG",
	"TTAAT",
	"TTACA",
	"TTACC",
	"TTACG",
	"TTACT",
	"TTAGA",
	"TTAGC",
	"TTAGG",
	"TTAGT",
	"TTATA",
	"TTATC",
	"TTATG",
	"TTATT",
	"TTCAA",
	"TTCAC",
	"TTCAT",
	"TTCCA",
	"TTCCC",
	"TTCCT",
	"TTCGA",
	"TTCGG",
	"TTCGT",
	"TTCTA",
	"TTCTG",
	"TTGAA",
	"TTGAC",
	"TTGAG",
	"TTGAT",
	"TTGCA",
	"TTGCG",
	"TTGGA",
	"TTGGG",
	"TTGTG",
	"TTTAA",
	"TTTAC",
	"TTTAG",
	"TTTAT",
	"TTTCA",
	"TTTCC",
	"TTTCG",
	"TTTGA",
	"TTTGG",
	"TTTTA",
	"TTTTG",
}

func TestMotifEnumeration_Dataset_motif_8(t *testing.T) {
	dna := NormalizeListDNA(dataset_motif_8)

	res := MotifEnumeration(dna, 5, 2)
	results := res.DeNormalize()
	sort.Strings(results)

	assert.Equal(t, dataset_motif_8_expected, results)
}
